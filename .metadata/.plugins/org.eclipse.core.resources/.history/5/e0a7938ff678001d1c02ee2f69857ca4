package com.tomtom.patternchecker.IOConsoleStream;

import java.util.Map;

import com.tomtom.patternchecker.IOConsoleStream.IOStream.IOStream.OutputStream;

public class ConsolePrompt implements OutputStream {

	@Override
	public void computeOutput(Map<String, Integer> value) {
		// TODO Auto-generated method stub
		if(value.isEmpty()) {
			processResults(value);
		}
	}
		
		/**
		 * Iterate and print the results to console one line apart
		 * @param result Map&lt;String,Integer&gt;- The unique item as key and count as number
		 */
		private void processResults(Map<String, Integer> value) {
			for (Map.Entry<String, Integer> entry : value.entrySet()) {
				String k = entry.getKey().toString();
				Integer v = entry.getValue();
				if ((k != null) && (value == null)) {
					System.out.println(k + "\n");
				} else {
					System.out.println(k + ", " + value+"\n");
				}
			
		}
			if(!value.isEmpty()) {
				try {
					for(String patternType: patternTypes) {
						Map<String, Integer> counts = patternCheckerImpl.patternCounter(patternType,lines);
						 for (Map.Entry<String, Integer> entry : counts.entrySet()) {
						      System.out.println(entry.getKey() + ": " + entry.getValue());
						    }
					}
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		
	}

}
